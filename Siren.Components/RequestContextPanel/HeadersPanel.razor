@using Siren.Components.Http

<SirenStack Class="w-100 h-100">
    <MudPaper Elevation="0" Height="50%" Width="100%" Class="p-1 overflow-y-scroll">
        <SirenStack Row="true" Spacing="6">
            <SirenText Typo="Typo.body1">Request Headers</SirenText>
            <SirenSpacer />
            <SirenIconButton OnClick="@(() => AddRequestHeader("Key", "Value"))"
                             Icon="@SirenIcons.Add"
                             Tooltip="@($"Add Header")"
                             Class="scale-75"
                             Size="Size.Medium"
                             Variant="Variant.Text"
                             Color="Color.Primary" />
        </SirenStack>

        <MudDataGrid T="DictionaryViewModel"
                     Items="@requestHeaders"
                     Context="context"
                     Class="w-100"
                     Bordered="false"
                     Elevation="0"
                     RowClass="text-truncate hover-error-zone"
                     Style="overflow:hidden;"
                     EditMode="DataGridEditMode.Cell"
                     EditTrigger="DataGridEditTrigger.Manual"
                     CommittedItemChanges="UpdateHeader"
                     ReadOnly="false"
                     Dense="true"
                     Hover="true">
            <Columns>
                <MudBlazor.PropertyColumn Property="x => x.Key" Title="Header">
                    <EditTemplate>
                        <SirenStack Row="true" Class="w-100 hover-zone">
                            <MudTextField @bind-Value="@context.Item.Key" OnBlur="(() => UpdateHeader(context.Item))" />
                            <SirenSpacer />
                            <SirenIconButton OnClick="@(async () => { await JsApiService.CopyToClipboardAsync(context.Item.Key); NotifyCopied(context.Item.Key);})"
                                             Icon="@SirenIcons.Copy"
                                             Class="hover-visible hover-visible-primary scale-75"
                                             Tooltip="@($"Copy key")"
                                             Size="Size.Small"
                                             Variant="Variant.Text"
                                             Color="Color.Transparent" />
                        </SirenStack>
                    </EditTemplate>
                </MudBlazor.PropertyColumn>

                <MudBlazor.PropertyColumn Property="x => x.Value" Title="Value">
                    <EditTemplate>
                        <SirenStack Row="true" Class="w-100 hover-zone">
                            <MudTextField @bind-Value="@context.Item.Value" OnBlur="(() => UpdateHeader(context.Item))" />
                            <SirenSpacer />
                            <SirenIconButton OnClick="@(async () => { await JsApiService.CopyToClipboardAsync(context.Item.Value); NotifyCopied(context.Item.Value);})"
                                             Icon="@SirenIcons.Copy"
                                             Class="hover-visible hover-visible-primary scale-75"
                                             Tooltip="@($"Copy value")"
                                             Size="Size.Small"
                                             Variant="Variant.Text"
                                             Color="Color.Transparent" />
                        </SirenStack>
                    </EditTemplate>
                </MudBlazor.PropertyColumn>
                <MudBlazor.TemplateColumn>
                    <CellTemplate>
                        <SirenSpacer />
                        <SirenIconButton OnClick="@(() => DeleteHeader(context.Item) )"
                                         Icon="@SirenIcons.Delete"
                                         Class="hover-visible hover-visible-error scale-75"
                                         Tooltip="@($"Delete `{context?.Item.Key ?? "variable"}`")"
                                         Size="Size.Small"
                                         Variant="Variant.Text"
                                         Color="Color.Transparent" />

                    </CellTemplate>
                    <EditTemplate>
                        <SirenSpacer />
                        <SirenIconButton OnClick="@(() =>  DeleteHeader(context.Item) )"
                                         Icon="@SirenIcons.Delete"
                                         Class="hover-visible hover-visible-error scale-75"
                                         Tooltip="@($"Delete `{context?.Item.Key ?? "variable"}`")"
                                         Size="Size.Small"
                                         Variant="Variant.Text"
                                         Color="Color.Transparent" />
                    </EditTemplate>
                </MudBlazor.TemplateColumn>

            </Columns>
        </MudDataGrid>
    </MudPaper>
    <SirenDivider />
    <MudPaper Elevation="0" Height="50%" Width="100%" Class="p-1 overflow-y-scroll">
        <SirenText Typo="Typo.body1">Response Headers</SirenText>
        @if (NetworkRequest?.Response?.Headers != null)
        {
            <MudDataGrid T="DictionaryViewModel"
                         Items="@(NetworkRequest.Response.Headers.ToViewModel())"
                         Context="context"
                         Class="w-100"
                         Bordered="false"
                         Elevation="0"
                         RowClass="text-truncate hover-error-zone"
                         Style="overflow:hidden;"
                         ReadOnly="true"
                         Dense="true"
                         Hover="true">
                <Columns>
                    <MudBlazor.PropertyColumn Property="x => x.Key">
                        <CellTemplate>
                            <SirenStack Row="true" Class="w-100 hover-zone">
                                <MudTextField @bind-Value="@context.Item.Key" />
                                <SirenSpacer />
                                <SirenIconButton OnClick="@(async () => { await JsApiService.CopyToClipboardAsync(context.Item.Key); NotifyCopied(context.Item.Key);})"
                                                 Icon="@SirenIcons.Copy"
                                                 Class="hover-visible hover-visible-primary scale-75"
                                                 Tooltip="@($"Copy key")"
                                                 Size="Size.Small"
                                                 Variant="Variant.Text"
                                                 Color="Color.Transparent" />
                            </SirenStack>
                        </CellTemplate>
                    </MudBlazor.PropertyColumn>

                    <MudBlazor.PropertyColumn Property="x => x.Value">
                        <CellTemplate>
                            <SirenStack Row="true" Class="w-100 hover-zone">
                                <MudTextField @bind-Value="@context.Item.Value" />
                                <SirenSpacer />
                                <SirenIconButton OnClick="@(async () => { await JsApiService.CopyToClipboardAsync(context.Item.Value); NotifyCopied(context.Item.Value);})"
                                                 Icon="@SirenIcons.Copy"
                                                 Class="hover-visible hover-visible-primary scale-75"
                                                 Tooltip="@($"Copy value")"
                                                 Size="Size.Small"
                                                 Variant="Variant.Text"
                                                 Color="Color.Transparent" />
                            </SirenStack>
                        </CellTemplate>
                    </MudBlazor.PropertyColumn>
                </Columns>
            </MudDataGrid>
        }
    </MudPaper>
</SirenStack>


@code {
    [Parameter]
    public SirenNetworkRequest NetworkRequest { get; set; }

    [Inject]
    public IJsApiService JsApiService { get; set; } = default!;

    [Inject]
    public ISnackbar Snackbar { get; set; } = default!;

    private List<DictionaryViewModel> requestHeaders = new();

    protected override void OnInitialized()
    {
        if (NetworkRequest?.Request?.Headers != null)
        {
            requestHeaders = NetworkRequest.Request.Headers.ToViewModel();
        }
    }

    private void AddRequestHeader(string key, string value)
    {
        requestHeaders.Add(new() { Key = key, Value = value });
    }

    protected void NotifyCopied(string value)
    {
        Snackbar.Add($"Copied `{value}` to clipboard", Severity.Info);
    }

    protected void UpdateHeader(DictionaryViewModel m)
    {
        var header = requestHeaders.Find(x => x.Id.Equals(m.Id));
        header.Key = m.Key;
        header.Value = m.Value;

        StateHasChanged();
    }

    protected void DeleteHeader(DictionaryViewModel m)
    {
        requestHeaders.Remove(m);
        StateHasChanged();
    }

}

