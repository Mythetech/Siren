@using MudBlazor
@inherits SirenBaseComponent

<style>
    * {
        --http-request-dropdown-color: @(GetColor(_selectedMethod));
        --http-request-dropdown-hover-bg: @(GetBackgroundColor(_selectedMethod));
    }
</style>

<MudSelect Clearable="false"
           Class="@($"{Class} http-request-dropdown mt-0")"
           Dense="true"
           AdornmentColor="Color.Inherit"
           InputClass="mud-palette-inherit"
           Variant="Variant.Text"
           Required="true"
           T="string"
           @ref="@MethodDropdown"
           OuterClass="http-request-dropdown-outer"
           Placeholder="Method"
           Underline="false"
           Value="_selectedMethod"
           ValueChanged="@(async (s) => { _selectedMethod = s; await SelectedMethodChanged.InvokeAsync(s); })"
           Style="@($"max-width:160px;color:{GetColor(_selectedMethod)};border:none;background:linear-gradient(-90deg, var(--mud-palette-surface) 0%, transparent 100%);")">
    @foreach (var method in _methods)
    {
        <MudSelectItem @onmouseenter="@(() => { _active = method; StateHasChanged(); })"
                       @onmouseleave="@(() => { if (_active.Equals(method, StringComparison.OrdinalIgnoreCase)) { _active = ""; StateHasChanged(); } })"
                       Style="@($"border-left:solid 4px {GetColor(method)};background-color:{GetBackgroundColor(method, IsFocused(method) ? 0.2 : 0.1)};color:{GetColor(method)};")"
                       Value="@method">
            <SirenText Style="@($"color:{GetColor(method)};")">@method</SirenText>
        </MudSelectItem>
    }
</MudSelect>

@code {
    string? _selectedMethod;
    List<string> _methods = ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS", "HEAD"];

    public string? SelectedMethod => _selectedMethod; 

    public async Task SetMethod(string method)
    {
        if (!string.IsNullOrWhiteSpace(method))
            method = method.ToUpper();

        _selectedMethod = method;
        await SelectedMethodChanged.InvokeAsync(_selectedMethod);
    }

    [Parameter]
    public EventCallback<string> SelectedMethodChanged { get; set; }

    public MudSelect<string>? MethodDropdown { get; set; }

    private string _active = "";

    string GetColor(string method)
    {
        if (string.IsNullOrWhiteSpace(method))
            return HttpMethodColors.Default;

        return method.ToUpper() switch
        {
            "GET" => HttpMethodColors.Get,
            "POST" => HttpMethodColors.Post,
            "PUT" => HttpMethodColors.Put,
            "DELETE" => HttpMethodColors.Delete,
            "PATCH" => HttpMethodColors.Patch,
            "OPTIONS" => HttpMethodColors.Options,
            "HEAD" => HttpMethodColors.Head,
            _ => HttpMethodColors.Default,
        };
    }

    bool IsFocused(string method)
    {
        return method.Equals(_active, StringComparison.OrdinalIgnoreCase);
    }

    string GetBackgroundColor(string method, double opacity = 0.1)
    {
        var color = GetColor(method);
        if (color?.IndexOf("#") < 0)
        {
            return "rgba(66, 66, 66, 0.1)";
        }

        var hexColor = color?.TrimStart('#');
        var r = int.Parse(hexColor.Substring(0, 2), System.Globalization.NumberStyles.HexNumber);
        var g = int.Parse(hexColor.Substring(2, 2), System.Globalization.NumberStyles.HexNumber);
        var b = int.Parse(hexColor.Substring(4, 2), System.Globalization.NumberStyles.HexNumber);
        return $"rgba({r}, {g}, {b}, {opacity})";
    }
}