@inherits LayoutComponentBase
@using MudBlazor;
@using Siren.Components.Theme
@using Siren.Components.AppContextPanel
@using Siren.Components.Http
@implements IDisposable

<MudThemeProvider @ref="_theme" @bind-IsDarkMode="@AppState.IsDarkMode" Theme="@Theme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Class="pl-4" Style="border-bottom-left-radius:3em;box-shadow:1px 1px 4px 0px var(--mud-palette-primary);border-bottom-right-radius:1.5em;">
        <SirenStack Row="true" Class="w-100" AlignItems="@AlignItems.Center" Spacing="12">
            <MudText Class="app-header-font" Typo="Typo.h4">Siren</MudText>
            <SirenSpacer />
            <HttpRequestTabs />
        </SirenStack>
    </MudAppBar>
    <MudDrawer @bind-Open="@AppState.SideBarOpen" Variant="DrawerVariant.Mini" Style="overflow: hidden;">
        <ContextPanel IsDarkMode="@AppState.IsDarkMode"
                      DrawerBackgroundColor="@_backgroundColor"
                      DrawerToggled="@(() => AppState.ToggleSideBar())"
                      DarkModeToggled="@(() => AppState.IsDarkMode = !AppState.IsDarkMode)" />
        <div class="resizer"></div>
    </MudDrawer>
    <MudMainContent Class=" pl-2 pr-0" Style="@($"max-height:100dvh;max-width:100vw;overflow:hidden;")">
        <MudContainer Class="px-0 mud-width-full" MaxWidth="MaxWidth.ExtraLarge" Style="@($"height:94vh;overflow:hidden;")">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code {
    [Inject]
    protected SirenAppState AppState { get; set; } = default!;

    [Inject]
    protected Microsoft.JSInterop.IJSRuntime JS { get; set; } = default!;

    private Func<string> GetWidth => () => AppState.SideBarOpen ? "74vw" : "calc(100vw - 52px)";

    protected MudThemeProvider _theme { get; set; } = default!;

    public bool _isDarkMode = false;

    private string _backgroundColor => (!AppState.IsDarkMode ? $"background-color:{_theme.Theme.PaletteLight.OverlayLight}" : $"background-color:{_theme.Theme.PaletteDark.Black}");

    private MudTheme Theme { get; } = new SirenTheme();

    private List<SirenNetworkRequest> _networkRequests = new();

    protected override void OnInitialized()
    {
        AppState.OnDarkModeChanged += HandleDarkModeChange;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            AppState.SetThemeProvider(_theme);
        }
        
        base.OnAfterRender(firstRender);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AppState.SetSystemColorMode();
        }
        
        await base.OnAfterRenderAsync(firstRender);
    }

    protected async void HandleDarkModeChange(bool isDarkMode)
    {
        await BlazorMonaco.Editor.Global.SetTheme(JS, isDarkMode ? "vs-dark" : "vs");
        StateHasChanged();
    }

    public void Dispose()
    {
        AppState.OnDarkModeChanged -= HandleDarkModeChange;
    }

}