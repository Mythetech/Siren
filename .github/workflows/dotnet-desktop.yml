# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Execute unit tests
      run: dotnet test Siren.Test/Siren.Test.csproj
      env:
        Configuration: Release

  publish:
    needs: test
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            rid: win-x64
            platform: Windows
            icon: Siren/wwwroot/logo5.png
          - os: ubuntu-latest
            rid: linux-x64
            platform: Linux
            icon: Siren/wwwroot/logo5.png
          - os: macos-latest
            rid: osx-x64
            platform: macOS
            icon: Siren/wwwroot/logo.icns
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
        
    - name: Install Velopack CLI
      run: dotnet tool update -g vpk
        
    - name: Get Version
      id: get_version
      run: echo "VERSION=0.0.${{ github.run_number }}" >> $GITHUB_OUTPUT
      shell: bash
        
    - name: Publish
      run: dotnet publish Siren/Siren.csproj -c Release -r ${{ matrix.rid }} --self-contained -p:PublishSingleFile=true -p:PublishTrimmed=false -o publish/${{ matrix.rid }}
        
    - name: Create Velopack Release
      run: vpk pack -u "Siren" -v ${{ steps.get_version.outputs.VERSION }} -o "releases/${{ matrix.platform }}" -p "publish/${{ matrix.rid }}" --icon ${{ matrix.icon }}
      
    - name: Upload Release Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Siren-${{ matrix.platform }}-${{ steps.get_version.outputs.VERSION }}
        path: releases/${{ matrix.platform }}

#  build-package:
#    needs: test 
#    runs-on: windows-latest
#    
#    env:
#      Solution_Name: Siren.sln
#      Wap_Project_Directory: Siren.Desktop
#      Wap_Project_Path: Siren.Desktop.csproj
#
#    steps:
#    - name: Checkout
#      uses: actions/checkout@v4
#      with:
#        fetch-depth: 0
#
#    - name: Install .NET Core
#      uses: actions/setup-dotnet@v4
#      with:
#        dotnet-version: 9.0.x
#
#    - name: Setup MSBuild.exe
#      uses: microsoft/setup-msbuild@v2
#
#    - name: Restore the application
#      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=Release
#
#    - name: Decode the pfx
#      run: |
#        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
#        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
#        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
#
#    - name: Create the app package
#      run: msbuild $env:Wap_Project_Path /p:Configuration=Release /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
#      env:
#        Appx_Bundle: Always
#        Appx_Bundle_Platforms: x86|x64
#        Appx_Package_Build_Mode: StoreUpload
#
#    - name: Remove the pfx
#      run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx
#
#    - name: Upload build artifacts
#      uses: actions/upload-artifact@v4
#      with:
#        name: MSIX Package
#        path: ${{ env.Wap_Project_Directory }}\AppPackages
